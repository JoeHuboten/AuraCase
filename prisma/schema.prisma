// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  phone         String?
  dateOfBirth   DateTime?
  role          UserRole  @default(USER)
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  cartItems     CartItem[]
  addresses     Address[]
  paymentMethods PaymentMethod[]
  wishlistItems WishlistItem[]
  reviews       Review[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum UserRole {
  USER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  image       String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id          String      @id @default(cuid())
  name        String
  slug        String      @unique
  description String?
  price       Float
  oldPrice    Float?
  discount    Int?
  image       String
  images      String
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String
  colors      String
  sizes       String
  rating      Float       @default(0)
  reviews     Int         @default(0)
  inStock     Boolean     @default(true)
  featured    Boolean     @default(false)
  specifications Json?
  orderItems  OrderItem[]
  cartItems   CartItem[]
  wishlistItems WishlistItem[]
  productReviews Review[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Order {
  id              String      @id @default(cuid())
  user            User        @relation(fields: [userId], references: [id])
  userId          String
  items           OrderItem[]
  total           Float
  subtotal        Float
  discount        Float       @default(0)
  deliveryFee     Float       @default(0)
  status          OrderStatus @default(PENDING)
  paymentType     PaymentType @default(CARD)
  paymentIntentId String?
  shippingAddress Address?    @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId String?
  paymentMethod   PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId String?
  trackingNumber  String?
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(cuid())
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
  color     String?
  size      String?
}

model CartItem {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int
  color     String?
  size      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, productId])
}

model Address {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  firstName   String
  lastName    String
  address1    String
  address2    String?
  city        String
  state       String
  postalCode  String
  country     String
  phone       String?
  isDefault   Boolean  @default(false)
  orders      Order[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PaymentMethod {
  id          String        @id @default(cuid())
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  type        PaymentType
  cardNumber  String?
  cardBrand   String?
  expiryMonth Int?
  expiryYear  Int?
  holderName  String?
  isDefault   Boolean       @default(false)
  orders      Order[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum PaymentType {
  CARD
  BANK_TRANSFER
  CASH_ON_DELIVERY
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model WishlistItem {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  createdAt DateTime @default(now())

  @@unique([userId, productId])
  @@index([userId])
}

model Review {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  rating    Int      // 1-5 stars
  title     String?
  comment   String?
  verified  Boolean  @default(false) // Verified purchase
  helpful   Int      @default(0) // Helpful votes
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
  @@index([productId])
  @@index([rating])
}

model DiscountCode {
  id          String   @id @default(cuid())
  code        String   @unique
  percentage  Int      // Discount percentage (1-100)
  active      Boolean  @default(true)
  expiresAt   DateTime?
  maxUses     Int?     // Maximum number of uses
  currentUses Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  read      Boolean  @default(false)
  replied   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdAt])
  @@index([read])
}