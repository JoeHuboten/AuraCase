generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  phone          String?
  dateOfBirth    DateTime?
  role           UserRole        @default(USER)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  accounts       Account[]
  addresses      Address[]
  cartItems      CartItem[]
  orders         Order[]
  paymentMethods PaymentMethod[]
  reviews        Review[]
  sessions       Session[]
  wishlistItems  WishlistItem[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id             String         @id @default(cuid())
  name           String
  slug           String         @unique
  description    String?
  price          Float
  oldPrice       Float?
  discount       Int?
  image          String
  images         String
  categoryId     String
  colors         String
  sizes          String
  rating         Float          @default(0)
  reviews        Int            @default(0)
  inStock        Boolean        @default(true)
  featured       Boolean        @default(false)
  specifications Json?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  cartItems      CartItem[]
  orderItems     OrderItem[]
  category       Category       @relation(fields: [categoryId], references: [id])
  productReviews Review[]
  wishlistItems  WishlistItem[]
}

model Order {
  id                String         @id @default(cuid())
  userId            String
  total             Float
  subtotal          Float
  discount          Float          @default(0)
  deliveryFee       Float          @default(0)
  status            OrderStatus    @default(PENDING)
  paymentType       PaymentType    @default(CARD)
  paymentIntentId   String?
  paymentId         String?        // PayPal transaction ID or other payment gateway ID
  discountCodeId    String?
  shippingAddressId String?
  paymentMethodId   String?
  trackingNumber    String?
  courierService    String?        // e.g., "DHL", "Econt", "Speedy"
  estimatedDelivery DateTime?
  actualDelivery    DateTime?
  notes             String?
  customerNotes     String?        // Notes from customer
  adminNotes        String?        // Internal notes
  cancelReason      String?
  cancelledAt       DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  paymentMethod     PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  shippingAddress   Address?       @relation(fields: [shippingAddressId], references: [id])
  discountCode      DiscountCode?  @relation(fields: [discountCodeId], references: [id])
  user              User           @relation(fields: [userId], references: [id])
  items             OrderItem[]
  statusHistory     OrderStatusHistory[]
  
  @@index([userId])
  @@index([status])
  @@index([trackingNumber])
}

model OrderStatusHistory {
  id        String      @id @default(cuid())
  orderId   String
  status    OrderStatus
  notes     String?
  createdBy String?     // User ID of who made the change
  createdAt DateTime    @default(now())
  order     Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  @@index([orderId])
  @@index([createdAt])
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  color     String?
  size      String?
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int
  color     String?
  size      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, productId])
}

model Address {
  id         String   @id @default(cuid())
  userId     String
  firstName  String
  lastName   String
  address1   String
  address2   String?
  city       String
  state      String
  postalCode String
  country    String
  phone      String?
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders     Order[]
}

model PaymentMethod {
  id          String      @id @default(cuid())
  userId      String
  type        PaymentType
  cardNumber  String?
  cardBrand   String?
  expiryMonth Int?
  expiryYear  Int?
  holderName  String?
  isDefault   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orders      Order[]
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int
  title     String?
  comment   String?
  verified  Boolean  @default(false)
  helpful   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([productId])
  @@index([rating])
}

model DiscountCode {
  id          String    @id @default(cuid())
  code        String    @unique
  percentage  Int
  active      Boolean   @default(true)
  expiresAt   DateTime?
  maxUses     Int?
  currentUses Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orders      Order[]
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  read      Boolean  @default(false)
  replied   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdAt])
  @@index([read])
}

enum UserRole {
  USER
  ADMIN
}

enum PaymentType {
  CARD
  PAYPAL
  BANK_TRANSFER
  CASH_ON_DELIVERY
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
