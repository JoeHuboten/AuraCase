AURACASE - –ü–™–õ–ù–û –¢–ï–•–ù–ò–ß–ï–°–ö–û –û–ü–ò–°–ê–ù–ò–ï
==========================================

üìö AuraCase - –ü—ä–ª–Ω–æ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ –û–ø–∏—Å–∞–Ω–∏–µ

üèóÔ∏è –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –ù–ê –ü–†–û–ï–ö–¢–ê
========================

1. –û–±—â–∞ –°—Ç—Ä—É–∫—Ç—É—Ä–∞
-----------------
AuraCase/
‚îú‚îÄ‚îÄ app/                    # Next.js App Router
‚îÇ   ‚îú‚îÄ‚îÄ (auth)/            # –ê–≤—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≥—Ä—É–ø–∏—Ä–∞–Ω–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∏
‚îÇ   ‚îú‚îÄ‚îÄ admin/             # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–µ–Ω –ø–∞–Ω–µ–ª
‚îÇ   ‚îú‚îÄ‚îÄ api/               # API –º–∞—Ä—à—Ä—É—Ç–∏
‚îÇ   ‚îú‚îÄ‚îÄ account/           # –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–∏ –∞–∫–∞—É–Ω—Ç
‚îÇ   ‚îú‚îÄ‚îÄ shop/              # –ú–∞–≥–∞–∑–∏–Ω
‚îÇ   ‚îú‚îÄ‚îÄ product/           # –ü—Ä–æ–¥—É–∫—Ç–æ–≤–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∏
‚îÇ   ‚îú‚îÄ‚îÄ cart/              # –ö–æ—à–Ω–∏—Ü–∞
‚îÇ   ‚îú‚îÄ‚îÄ checkout/          # –ü–æ—Ä—ä—á–∫–∞
‚îÇ   ‚îî‚îÄ‚îÄ globals.css        # –ì–ª–æ–±–∞–ª–Ω–∏ —Å—Ç–∏–ª–æ–≤–µ
‚îú‚îÄ‚îÄ components/            # React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
‚îú‚îÄ‚îÄ contexts/              # React Context API
‚îú‚îÄ‚îÄ lib/                   # –ü–æ–º–æ—â–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏
‚îú‚îÄ‚îÄ prisma/                # –ë–∞–∑–∞ –¥–∞–Ω–Ω–∏ —Å—Ö–µ–º–∞
‚îî‚îÄ‚îÄ public/                # –°—Ç–∞—Ç–∏—á–Ω–∏ —Ñ–∞–π–ª–æ–≤–µ

üîê –°–ò–°–¢–ï–ú–ê –ó–ê –ê–í–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø
===========================

1. JWT –ë–∞–∑–∏—Ä–∞–Ω–∞ –ê–≤—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
------------------------------

lib/simple-auth.ts
- –û—Å–Ω–æ–≤–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
- signIn(email: string, password: string)
- createSession(user: User)
- getCurrentUser()
- signOut()

–ö–∞–∫ —Ä–∞–±–æ—Ç–∏:
1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚Üí –•–µ—à–∏—Ä–∞ –ø–∞—Ä–æ–ª–∞ —Å bcryptjs
2. –í—Ö–æ–¥ ‚Üí –ü—Ä–æ–≤–µ—Ä—è–≤–∞ –ø–∞—Ä–æ–ª–∞ ‚Üí –°—ä–∑–¥–∞–≤–∞ JWT —Ç–æ–∫–µ–Ω
3. –°–µ—Å–∏—è ‚Üí –ó–∞–ø–∞–∑–≤–∞ —Ç–æ–∫–µ–Ω –≤ HTTP-only cookie
4. –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è ‚Üí –ü—Ä–æ–≤–µ—Ä—è–≤–∞ —Ç–æ–∫–µ–Ω –ø—Ä–∏ –≤—Å—è–∫–∞ –∑–∞—è–≤–∫–∞

API –ú–∞—Ä—à—Ä—É—Ç–∏:
- POST /api/auth/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
- POST /api/auth/simple-signin - –í—Ö–æ–¥
- POST /api/auth/logout - –ò–∑—Ö–æ–¥
- GET /api/auth/me - –¢–µ–∫—É—â –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª

2. React Context –∑–∞ –ê–≤—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
----------------------------------

contexts/AuthContext.tsx
interface AuthContextType {
  user: User | null;
  loading: boolean;
  login: (user: User) => void;
  logout: () => void;
  refreshUser: () => Promise<void>;
}

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç:
- –ì–ª–æ–±–∞–ª–Ω–æ —Å—ä—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –ø—Ä–∏ –ø—Ä–æ–º–µ–Ω–∏
- –ó–∞—â–∏—Ç–∞ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–∏ (middleware)
- –ò–Ω—Å—Ç–∞–Ω—Ç–Ω–∏ UI –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

üóÑÔ∏è –ë–ê–ó–ê –î–ê–ù–ù–ò (Prisma ORM)
==========================

1. –°—Ö–µ–º–∞ –Ω–∞ –ë–∞–∑–∞—Ç–∞ –î–∞–Ω–Ω–∏
------------------------

prisma/schema.prisma

model User {
  id          String   @id @default(cuid())
  name        String?
  email       String   @unique
  password    String
  phone       String?
  dateOfBirth DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // –í—Ä—ä–∑–∫–∏
  addresses      Address[]
  paymentMethods PaymentMethod[]
  orders         Order[]
  cartItems      CartItem[]
}

model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String
  price       Float
  discount    Float?
  image       String
  images      String[]
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // –í—Ä—ä–∑–∫–∏
  category   Category    @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[]
  cartItems  CartItem[]
}

model Order {
  id               String   @id @default(cuid())
  userId           String
  total            Float
  status           OrderStatus @default(PENDING)
  shippingAddress  String?
  paymentMethod    String?
  trackingNumber   String?
  notes            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // –í—Ä—ä–∑–∫–∏
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]
  shippingAddressId String?
  paymentMethodId   String?
}

2. –í—Ä—ä–∑–∫–∏ –º–µ–∂–¥—É –¢–∞–±–ª–∏—Ü–∏—Ç–µ
-------------------------

One-to-Many –í—Ä—ä–∑–∫–∏:
- User ‚Üí Order (–µ–¥–∏–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª, –º–Ω–æ–≥–æ –ø–æ—Ä—ä—á–∫–∏)
- User ‚Üí Address (–µ–¥–∏–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª, –º–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∏)
- User ‚Üí PaymentMethod (–µ–¥–∏–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª, –º–Ω–æ–≥–æ –∫–∞—Ä—Ç–∏)
- Category ‚Üí Product (–µ–¥–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –º–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∏)
- Order ‚Üí OrderItem (–µ–¥–Ω–∞ –ø–æ—Ä—ä—á–∫–∞, –º–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∏)

Many-to-One –í—Ä—ä–∑–∫–∏:
- Product ‚Üí Category (–º–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∏, –µ–¥–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è)
- OrderItem ‚Üí Product (–º–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∏, –µ–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç)

üõí –ï–õ–ï–ö–¢–†–û–ù–ù–ê –¢–™–†–ì–û–í–ò–Ø
=====================

1. –ö–∞—Ç–∞–ª–æ–≥ —Å –ü—Ä–æ–¥—É–∫—Ç–∏
---------------------

app/shop/page.tsx

–§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ –∏ —Ç—ä—Ä—Å–µ–Ω–µ:
const [searchQuery, setSearchQuery] = useState('');
const [selectedCategory, setSelectedCategory] = useState('all');
const [priceRange, setPriceRange] = useState([0, 200]);
const [sortBy, setSortBy] = useState('name');

–§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏:
const filteredProducts = useMemo(() => {
  return products.filter(product => {
    const matchesSearch = product.name.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesCategory = selectedCategory === 'all' || product.categoryId === selectedCategory;
    const matchesPrice = product.price >= priceRange[0] && product.price <= priceRange[1];
    
    return matchesSearch && matchesCategory && matchesPrice;
  });
}, [products, searchQuery, selectedCategory, priceRange]);

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç–∏:
- –¢—ä—Ä—Å–µ–Ω–µ –ø–æ –∏–º–µ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç
- –§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
- –¶–µ–Ω–æ–≤–∏ –¥–∏–∞–ø–∞–∑–æ–Ω —Å range slider
- –°–æ—Ä—Ç–∏—Ä–∞–Ω–µ –ø–æ –∏–º–µ, —Ü–µ–Ω–∞, –¥–∞—Ç–∞
- Grid/List view —Ä–µ–∂–∏–º–∏
- –ú–æ–±–∏–ª–Ω–∏ —Ñ–∏–ª—Ç—Ä–∏ —Å overlay

2. –ö–æ—à–Ω–∏—Ü–∞ –∑–∞ –ü–∞–∑–∞—Ä—É–≤–∞–Ω–µ
------------------------

app/api/cart/route.ts

GET - –í–∑–µ–º–∏ –∫–æ—à–Ω–∏—Ü–∞—Ç–∞:
export async function GET() {
  const user = await getCurrentUser();
  if (!user) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  
  const cartItems = await prisma.cartItem.findMany({
    where: { userId: user.id },
    include: { product: true }
  });
  
  return NextResponse.json(cartItems);
}

POST - –î–æ–±–∞–≤–∏ –≤ –∫–æ—à–Ω–∏—Ü–∞—Ç–∞:
export async function POST(request: NextRequest) {
  const user = await getCurrentUser();
  const { productId, quantity } = await request.json();
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ä—Ç –≤–µ—á–µ –µ –≤ –∫–æ—à–Ω–∏—Ü–∞—Ç–∞
  const existingItem = await prisma.cartItem.findFirst({
    where: { userId: user.id, productId }
  });
  
  if (existingItem) {
    // –û–±–Ω–æ–≤–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ—Ç–æ
    await prisma.cartItem.update({
      where: { id: existingItem.id },
      data: { quantity: existingItem.quantity + quantity }
    });
  } else {
    // –°—ä–∑–¥–∞–π –Ω–æ–≤ –∞—Ä—Ç–∏–∫—É–ª
    await prisma.cartItem.create({
      data: { userId: user.id, productId, quantity }
    });
  }
}

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç–∏:
- –î–æ–±–∞–≤—è–Ω–µ/–ø—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏
- –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
- –õ–æ–∫–∞–ª–Ω–æ —Å—ä—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞ –Ω–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞–Ω–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏
- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏ –ø—Ä–∏ –≤—Ö–æ–¥
- –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ –æ–±—â–∞ —Å—É–º–∞

3. –ü—Ä–æ—Ü–µ—Å –Ω–∞ –ü–æ—Ä—ä—á–∫–∞
--------------------

app/checkout/page.tsx

–°—Ç—ä–ø–∫–∏ –Ω–∞ –ø–æ—Ä—ä—á–∫–∞—Ç–∞:
const [currentStep, setCurrentStep] = useState(1);
const [selectedAddress, setSelectedAddress] = useState(null);
const [selectedPaymentMethod, setSelectedPaymentMethod] = useState(null);

–§—É–Ω–∫—Ü–∏—è –∑–∞ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –ø–æ—Ä—ä—á–∫–∞:
const handlePlaceOrder = async () => {
  const orderData = {
    userId: user.id,
    items: cartItems,
    shippingAddressId: selectedAddress.id,
    paymentMethodId: selectedPaymentMethod.id,
    total: calculateTotal()
  };
  
  const response = await fetch('/api/orders', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(orderData)
  });
  
  if (response.ok) {
    // –ò–∑—á–∏—Å—Ç–∏ –∫–æ—à–Ω–∏—Ü–∞—Ç–∞ –∏ –ø—Ä–µ–Ω–∞—Å–æ—á–∏
    router.push('/account?tab=orders');
  }
};

API –∑–∞ –ü–æ—Ä—ä—á–∫–∏:
app/api/orders/route.ts
export async function POST(request: NextRequest) {
  const user = await getCurrentUser();
  const { items, shippingAddressId, paymentMethodId, total } = await request.json();
  
  // –°—ä–∑–¥–∞–π –ø–æ—Ä—ä—á–∫–∞
  const order = await prisma.order.create({
    data: {
      userId: user.id,
      total,
      shippingAddressId,
      paymentMethodId,
      status: 'PENDING'
    }
  });
  
  // –°—ä–∑–¥–∞–π –∞—Ä—Ç–∏–∫—É–ª–∏ –∑–∞ –ø–æ—Ä—ä—á–∫–∞—Ç–∞
  for (const item of items) {
    await prisma.orderItem.create({
      data: {
        orderId: order.id,
        productId: item.productId,
        quantity: item.quantity,
        price: item.product.price
      }
    });
  }
  
  // –ò–∑—á–∏—Å—Ç–∏ –∫–æ—à–Ω–∏—Ü–∞—Ç–∞
  await prisma.cartItem.deleteMany({
    where: { userId: user.id }
  });
  
  return NextResponse.json(order);
}

üë§ –ü–û–¢–†–ï–ë–ò–¢–ï–õ–°–ö–ò –ê–ö–ê–£–ù–¢
======================

1. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ü—Ä–æ—Ñ–∏–ª
-----------------------

app/api/account/profile/route.ts

GET - –í–∑–µ–º–∏ –ø—Ä–æ—Ñ–∏–ª:
export async function GET() {
  const user = await getCurrentUser();
  const userProfile = await prisma.user.findUnique({
    where: { id: user.id },
    select: {
      id: true,
      name: true,
      email: true,
      phone: true,
      dateOfBirth: true
    }
  });
  return NextResponse.json(userProfile);
}

PUT - –û–±–Ω–æ–≤–∏ –ø—Ä–æ—Ñ–∏–ª:
export async function PUT(request: NextRequest) {
  const user = await getCurrentUser();
  const { name, email, phone, dateOfBirth } = await request.json();
  
  const updatedUser = await prisma.user.update({
    where: { id: user.id },
    data: {
      ...(name !== undefined && { name }),
      ...(email !== undefined && { email }),
      ...(phone !== undefined && { phone }),
      ...(dateOfBirth !== undefined && dateOfBirth !== "" && { dateOfBirth: new Date(dateOfBirth) }),
      ...(dateOfBirth === "" && { dateOfBirth: null })
    }
  });
  
  return NextResponse.json(updatedUser);
}

2. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ê–¥—Ä–µ—Å–∏
-----------------------

app/api/account/addresses/route.ts

POST - –°—ä–∑–¥–∞–π –∞–¥—Ä–µ—Å:
export async function POST(request: NextRequest) {
  const user = await getCurrentUser();
  const { firstName, lastName, address1, city, state, postalCode, country, phone, isDefault } = await request.json();
  
  // –ê–∫–æ –µ –∑–∞–¥–∞–¥–µ–Ω –∫–∞—Ç–æ –æ—Å–Ω–æ–≤–µ–Ω, –ø—Ä–µ–º–∞—Ö–Ω–∏ –æ—Å–Ω–æ–≤–Ω–∏—è —Å—Ç–∞—Ç—É—Å –æ—Ç –¥—Ä—É–≥–∏—Ç–µ
  if (isDefault) {
    await prisma.address.updateMany({
      where: { userId: user.id },
      data: { isDefault: false }
    });
  }
  
  const address = await prisma.address.create({
    data: {
      userId: user.id,
      firstName,
      lastName,
      address1,
      city,
      state,
      postalCode,
      country,
      phone,
      isDefault: isDefault || false
    }
  });
  
  return NextResponse.json(address, { status: 201 });
}

3. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ú–µ—Ç–æ–¥–∏ –Ω–∞ –ü–ª–∞—â–∞–Ω–µ
----------------------------------

app/api/account/payment-methods/route.ts

POST - –°—ä–∑–¥–∞–π –º–µ—Ç–æ–¥ –Ω–∞ –ø–ª–∞—â–∞–Ω–µ:
export async function POST(request: NextRequest) {
  const user = await getCurrentUser();
  const { type, cardNumber, cardBrand, expiryMonth, expiryYear, holderName, isDefault } = await request.json();
  
  // –ê–∫–æ –µ –∑–∞–¥–∞–¥–µ–Ω –∫–∞—Ç–æ –æ—Å–Ω–æ–≤–µ–Ω, –ø—Ä–µ–º–∞—Ö–Ω–∏ –æ—Å–Ω–æ–≤–Ω–∏—è —Å—Ç–∞—Ç—É—Å –æ—Ç –¥—Ä—É–≥–∏—Ç–µ
  if (isDefault) {
    await prisma.paymentMethod.updateMany({
      where: { userId: user.id },
      data: { isDefault: false }
    });
  }
  
  const paymentMethod = await prisma.paymentMethod.create({
    data: {
      userId: user.id,
      type: type || 'CARD',
      cardNumber,
      cardBrand,
      expiryMonth: parseInt(expiryMonth),
      expiryYear: parseInt(expiryYear),
      holderName,
      isDefault: isDefault || false
    }
  });
  
  return NextResponse.json(paymentMethod, { status: 201 });
}

üõ†Ô∏è –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ï–ù –ü–ê–ù–ï–õ
========================

1. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞ –ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª–∞
----------------------------

app/admin/layout.tsx

–ó–∞—â–∏—Ç–∞ –Ω–∞ –∞–¥–º–∏–Ω –º–∞—Ä—à—Ä—É—Ç–∏—Ç–µ:
export default function AdminLayout({ children }: { children: React.ReactNode }) {
  const { user, loading } = useAuth();
  
  if (loading) return <div>Loading...</div>;
  if (!user || user.email !== 'admin@auracase.com') {
    return <div>Access Denied</div>;
  }
  
  return (
    <div className="flex min-h-screen bg-background">
      <AdminSidebar />
      <main className="flex-1 p-6">
        {children}
      </main>
    </div>
  );
}

2. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ü—Ä–æ–¥—É–∫—Ç–∏
-------------------------

app/api/admin/products/route.ts

GET - –í–∑–µ–º–∏ –≤—Å–∏—á–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏:
export async function GET() {
  const products = await prisma.product.findMany({
    include: { category: true },
    orderBy: { createdAt: 'desc' }
  });
  return NextResponse.json(products);
}

POST - –°—ä–∑–¥–∞–π –ø—Ä–æ–¥—É–∫—Ç:
export async function POST(request: NextRequest) {
  const { name, description, price, discount, image, images, categoryId } = await request.json();
  
  // –ì–µ–Ω–µ—Ä–∏—Ä–∞–π slug –æ—Ç –∏–º–µ—Ç–æ
  const slug = name.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '');
  
  const product = await prisma.product.create({
    data: {
      name,
      slug,
      description,
      price: parseFloat(price),
      discount: discount ? parseFloat(discount) : null,
      image,
      images: images ? images.split(',').map((img: string) => img.trim()) : [],
      categoryId
    }
  });
  
  return NextResponse.json(product, { status: 201 });
}

3. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ü–æ—Ä—ä—á–∫–∏
------------------------

app/api/admin/orders/route.ts

GET - –í–∑–µ–º–∏ –≤—Å–∏—á–∫–∏ –ø–æ—Ä—ä—á–∫–∏:
export async function GET() {
  const orders = await prisma.order.findMany({
    include: {
      user: {
        select: { id: true, name: true, email: true }
      },
      items: {
        include: {
          product: {
            select: { id: true, name: true, image: true }
          }
        }
      }
    },
    orderBy: { createdAt: 'desc' }
  });
  
  return NextResponse.json(orders);
}

üé® –ü–û–¢–†–ï–ë–ò–¢–ï–õ–°–ö–ò –ò–ù–¢–ï–†–§–ï–ô–°
==========================

1. –î–∏–∑–∞–π–Ω –°–∏—Å—Ç–µ–º–∞
-----------------

app/globals.css

–¶–≤–µ—Ç–æ–≤–∞ —Å—Ö–µ–º–∞:
:root {
  --background: #0a0a0a;
  --foreground: #fafafa;
  --primary: #1a1a1a;
  --secondary: #262626;
  --accent: #3b82f6;
  --text-primary: #ffffff;
  --text-secondary: #a3a3a3;
}

–ì–ª–æ–±–∞–ª–Ω–∏ —Å—Ç–∏–ª–æ–≤–µ –∑–∞ –±—É—Ç–æ–Ω–∏:
.btn-primary {
  @apply relative overflow-hidden transition-all duration-300 ease-out;
  @apply bg-gradient-to-r from-accent to-accent/80 text-white;
  @apply px-6 py-3 rounded-lg font-medium;
  @apply hover:scale-105 hover:shadow-lg hover:shadow-accent/30;
  @apply focus:outline-none focus:ring-2 focus:ring-accent/50;
  @apply cursor-pointer;
}

.btn-primary::before {
  content: '';
  @apply absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent;
  @apply transform -skew-x-12 -translate-x-full;
  @apply transition-transform duration-700;
}

.btn-primary:hover::before {
  @apply translate-x-full;
}

2. –ê–Ω–∏–º–∞—Ü–∏–∏ —Å GSAP
------------------

components/ScrollAnimation.tsx

export function ScrollAnimation({ 
  children, 
  animation = 'fadeIn', 
  delay = 0 
}: ScrollAnimationProps) {
  const elementRef = useRef<HTMLDivElement>(null);
  
  useEffect(() => {
    if (!elementRef.current) return;
    
    const element = elementRef.current;
    
    // –ù–∞—á–∞–ª–Ω–∏ —Å—Ç–∏–ª–æ–≤–µ
    gsap.set(element, {
      opacity: animation === 'fadeIn' ? 0 : 1,
      y: animation === 'slideUp' ? 50 : 0,
      x: animation === 'slideLeft' ? -50 : animation === 'slideRight' ? 50 : 0,
      scale: animation === 'scaleUp' ? 0.9 : 1
    });
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏ —Å–∫—Ä–æ–ª
    gsap.to(element, {
      opacity: 1,
      y: 0,
      x: 0,
      scale: 1,
      duration: 0.8,
      delay,
      ease: 'power2.out',
      scrollTrigger: {
        trigger: element,
        start: 'top 90%',
        toggleActions: 'play none none reverse'
      }
    });
  }, [animation, delay]);
  
  return <div ref={elementRef}>{children}</div>;
}

3. Responsive Design
--------------------

Tailwind CSS Breakpoints:
/* –ú–æ–±–∏–ª–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ */
@media (max-width: 640px) { /* sm */ }

/* –¢–∞–±–ª–µ—Ç–∏ */
@media (min-width: 768px) { /* md */ }

/* –î–µ—Å–∫—Ç–æ–ø */
@media (min-width: 1024px) { /* lg */ }

/* –ì–æ–ª–µ–º–∏ –µ–∫—Ä–∞–Ω–∏ */
@media (min-width: 1280px) { /* xl */ }

–ú–æ–±–∏–ª–Ω–∏ –§–∏–ª—Ç—Ä–∏:
app/shop/page.tsx
const [mobileFiltersOpen, setMobileFiltersOpen] = useState(false);

// –ú–æ–±–∏–ª–µ–Ω overlay –∑–∞ —Ñ–∏–ª—Ç—Ä–∏
{mobileFiltersOpen && (
  <div className="fixed inset-0 z-50 lg:hidden">
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm" 
         onClick={() => setMobileFiltersOpen(false)} />
    <div className="fixed left-0 top-0 h-full w-80 bg-primary p-6 overflow-y-auto">
      {/* –§–∏–ª—Ç—Ä–∏ */}
      <button onClick={() => setMobileFiltersOpen(false)}>
        <FiX className="w-6 h-6" />
      </button>
    </div>
  </div>
)}

üê≥ DOCKER –ö–û–ù–¢–ï–ô–ù–ï–†–ò–ó–ê–¶–ò–Ø
=========================

1. Development Setup
--------------------

docker-compose.dev.yml
version: '3.8'
services:
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - DATABASE_URL=file:./dev.db
    command: npm run dev

Dockerfile.dev
FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
EXPOSE 3000
CMD ["npm", "run", "dev"]

2. Production Setup
-------------------

docker-compose.yml
version: '3.8'
services:
  app:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=file:./prod.db
    volumes:
      - ./prisma:/app/prisma
    command: npm run start

Dockerfile
FROM node:18-alpine AS base
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production

FROM base AS build
RUN npm ci
COPY . .
RUN npm run build

FROM base AS production
COPY --from=build /app/.next ./.next
COPY --from=build /app/public ./public
COPY --from=build /app/prisma ./prisma
RUN npx prisma generate
EXPOSE 3000
CMD ["npm", "start"]

üîß API –ê–†–•–ò–¢–ï–ö–¢–£–†–ê
=================

1. RESTful API Design
---------------------

–ú–∞—Ä—à—Ä—É—Ç–∏ –∑–∞ –ü—Ä–æ–¥—É–∫—Ç–∏:
GET    /api/products           # –í—Å–∏—á–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏
GET    /api/products/[id]      # –ö–æ–Ω–∫—Ä–µ—Ç–µ–Ω –ø—Ä–æ–¥—É–∫—Ç
POST   /api/products           # –°—ä–∑–¥–∞–π –ø—Ä–æ–¥—É–∫—Ç (admin)
PUT    /api/products/[id]      # –û–±–Ω–æ–≤–∏ –ø—Ä–æ–¥—É–∫—Ç (admin)
DELETE /api/products/[id]      # –ò–∑—Ç—Ä–∏–π –ø—Ä–æ–¥—É–∫—Ç (admin)

–ú–∞—Ä—à—Ä—É—Ç–∏ –∑–∞ –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏:
GET    /api/auth/me            # –¢–µ–∫—É—â –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
POST   /api/auth/register      # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
POST   /api/auth/simple-signin # –í—Ö–æ–¥
POST   /api/auth/logout        # –ò–∑—Ö–æ–¥

–ú–∞—Ä—à—Ä—É—Ç–∏ –∑–∞ –ê–∫–∞—É–Ω—Ç:
GET    /api/account/profile           # –ü—Ä–æ—Ñ–∏–ª
PUT    /api/account/profile           # –û–±–Ω–æ–≤–∏ –ø—Ä–æ—Ñ–∏–ª
GET    /api/account/addresses         # –ê–¥—Ä–µ—Å–∏
POST   /api/account/addresses         # –°—ä–∑–¥–∞–π –∞–¥—Ä–µ—Å
PUT    /api/account/addresses/[id]    # –û–±–Ω–æ–≤–∏ –∞–¥—Ä–µ—Å
DELETE /api/account/addresses/[id]    # –ò–∑—Ç—Ä–∏–π –∞–¥—Ä–µ—Å

2. Middleware –∑–∞ –ê–≤—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
-------------------------------

lib/simple-auth.ts
export async function getCurrentUser(): Promise<User | null> {
  try {
    const token = cookies().get('auth_token')?.value;
    if (!token) return null;
    
    const decoded = jwt.verify(token, process.env.JWT_SECRET!) as { userId: string };
    const user = await prisma.user.findUnique({
      where: { id: decoded.userId },
      select: { id: true, name: true, email: true, phone: true, dateOfBirth: true }
    });
    
    return user;
  } catch (error) {
    return null;
  }
}

3. Error Handling
-----------------

–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–∞–Ω–∏ Error Responses:
// –£—Å–ø–µ—à–Ω–∏ –æ—Ç–≥–æ–≤–æ—Ä–∏
return NextResponse.json(data, { status: 200 });
return NextResponse.json(data, { status: 201 }); // Created

// –ì—Ä–µ—à–∫–∏
return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
return NextResponse.json({ error: 'Not Found' }, { status: 404 });
return NextResponse.json({ error: 'Server Error' }, { status: 500 });

üì± –ú–û–ë–ò–õ–ù–ê –ê–î–ê–ü–¢–ê–¶–ò–Ø
===================

1. Responsive Grid System
-------------------------

Shop Page Layout:
// –î–µ—Å–∫—Ç–æ–ø: 4 –∫–æ–ª–æ–Ω–∏, –¢–∞–±–ª–µ—Ç: 2 –∫–æ–ª–æ–Ω–∏, –ú–æ–±–∏–ª–µ–Ω: 1 –∫–æ–ª–æ–Ω–∞
<div className={`grid gap-6 ${
  viewMode === 'grid' 
    ? 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4'
    : 'grid-cols-1'
}`}>
  {filteredProducts.map(product => (
    <ProductCard key={product.id} product={product} />
  ))}
</div>

2. Touch-Friendly Interface
---------------------------

–ú–æ–±–∏–ª–Ω–∏ –ë—É—Ç–æ–Ω–∏:
/* –ú–∏–Ω–∏–º–∞–ª–µ–Ω —Ä–∞–∑–º–µ—Ä –∑–∞ touch targets */
.btn-mobile {
  @apply min-h-[44px] min-w-[44px];
  @apply touch-manipulation;
  @apply active:scale-95;
}

3. Mobile-First Design
----------------------

Breakpoint Strategy:
/* Mobile First Approach */
.container {
  @apply px-4; /* Mobile */
}

@screen md {
  .container {
    @apply px-6; /* Tablet */
  }
}

@screen lg {
  .container {
    @apply px-8; /* Desktop */
  }
}

üöÄ PERFORMANCE –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø
=========================

1. Next.js Optimizations
------------------------

Image Optimization:
import Image from 'next/image';

<Image
  src={product.image}
  alt={product.name}
  width={300}
  height={300}
  className="w-full h-48 object-cover"
  priority={index < 4} // Lazy load except first 4
/>

Code Splitting:
// –î–∏–Ω–∞–º–∏—á–Ω–æ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
const AdminPanel = dynamic(() => import('@/components/AdminPanel'), {
  loading: () => <div>Loading...</div>
});

2. Database Optimizations
-------------------------

Prisma Query Optimization:
// –í–∫–ª—é—á–≤–∞–Ω–µ –Ω–∞ —Å–≤—ä—Ä–∑–∞–Ω–∏ –¥–∞–Ω–Ω–∏ –≤ –µ–¥–Ω–∞ –∑–∞—è–≤–∫–∞
const products = await prisma.product.findMany({
  include: {
    category: true,
    _count: {
      select: { orderItems: true }
    }
  },
  take: 20, // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
  skip: page * 20
});

3. Caching Strategy
-------------------

API Response Caching:
// Cache —Å—Ç–∞—Ç–∏—á–Ω–∏ –¥–∞–Ω–Ω–∏
export async function GET() {
  const products = await prisma.product.findMany();
  
  return NextResponse.json(products, {
    headers: {
      'Cache-Control': 'public, s-maxage=3600, stale-while-revalidate=86400'
    }
  });
}

üîí –°–ò–ì–£–†–ù–û–°–¢
============

1. Authentication Security
--------------------------

JWT Token Security:
// –°–∏–≥—É—Ä–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ —Ç–æ–∫–µ–Ω
const token = jwt.sign(
  { userId: user.id },
  process.env.JWT_SECRET!,
  { expiresIn: '7d' }
);

// HTTP-only cookie
cookies().set('auth_token', token, {
  httpOnly: true,
  secure: process.env.NODE_ENV === 'production',
  sameSite: 'lax',
  maxAge: 7 * 24 * 60 * 60 // 7 –¥–Ω–∏
});

2. Input Validation
-------------------

API Input Sanitization:
// –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –≤—Ö–æ–¥–Ω–∏ –¥–∞–Ω–Ω–∏
const { name, email, password } = await request.json();

if (!name || !email || !password) {
  return NextResponse.json({ error: 'Missing required fields' }, { status: 400 });
}

if (!isValidEmail(email)) {
  return NextResponse.json({ error: 'Invalid email format' }, { status: 400 });
}

if (password.length < 6) {
  return NextResponse.json({ error: 'Password too short' }, { status: 400 });
}

3. SQL Injection Protection
---------------------------

Prisma ORM Protection:
// Prisma –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞—â–∏—Ç–∞–≤–∞ –æ—Ç SQL injection
const user = await prisma.user.findUnique({
  where: { email: userEmail } // –ë–µ–∑–æ–ø–∞—Å–Ω–æ
});

// –í–º–µ—Å—Ç–æ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ:
// const query = `SELECT * FROM users WHERE email = '${userEmail}'`;

üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì –ò –õ–û–ì–ò–†–ê–ù–ï
========================

1. Error Logging
----------------

API Error Handling:
export async function POST(request: NextRequest) {
  try {
    // API –ª–æ–≥–∏–∫–∞
  } catch (error) {
    console.error('API Error:', error);
    
    // –õ–æ–≥–∏—Ä–∞–Ω–µ –≤ production
    if (process.env.NODE_ENV === 'production') {
      // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å logging service
    }
    
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

2. Performance Monitoring
-------------------------

Request Timing:
const startTime = Date.now();

// API –ª–æ–≥–∏–∫–∞

const duration = Date.now() - startTime;
console.log(`API Request took ${duration}ms`);

üß™ –¢–ï–°–¢–í–ê–ù–ï
===========

1. Unit Tests (–ó–∞ –±—ä–¥–µ—â–æ —Ä–∞–∑–≤–∏—Ç–∏–µ)
-----------------------------------

–ü—Ä–∏–º–µ—Ä–µ–Ω —Ç–µ—Å—Ç:
// __tests__/auth.test.ts
import { signIn, createSession } from '@/lib/simple-auth';

describe('Authentication', () => {
  test('should sign in with valid credentials', async () => {
    const result = await signIn('test@example.com', 'password123');
    expect(result.success).toBe(true);
    expect(result.user).toBeDefined();
  });
  
  test('should reject invalid credentials', async () => {
    const result = await signIn('test@example.com', 'wrongpassword');
    expect(result.success).toBe(false);
    expect(result.error).toBe('Invalid credentials');
  });
});

2. Integration Tests
--------------------

API Endpoint Testing:
// __tests__/api/products.test.ts
import { GET, POST } from '@/app/api/products/route';

describe('/api/products', () => {
  test('GET should return products', async () => {
    const response = await GET();
    const data = await response.json();
    
    expect(response.status).toBe(200);
    expect(Array.isArray(data)).toBe(true);
  });
});

üìà –ê–ù–ê–õ–ò–¢–ò–ö–ê –ò –ú–ï–¢–†–ò–ö–ò
======================

1. User Analytics
-----------------

Tracking User Actions:
// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞ –ø—Ä–æ—Å–ª–µ–¥—è–≤–∞–Ω–µ
const trackEvent = (eventName: string, properties: any) => {
  if (typeof window !== 'undefined') {
    // Google Analytics, Mixpanel, etc.
    gtag('event', eventName, properties);
  }
};

// –ò–∑–ø–æ–ª–∑–≤–∞–Ω–µ
const handleAddToCart = (product: Product) => {
  trackEvent('add_to_cart', {
    product_id: product.id,
    product_name: product.name,
    price: product.price
  });
  
  // –î–æ–±–∞–≤–∏ –≤ –∫–æ—à–Ω–∏—Ü–∞—Ç–∞
  addToCart(product);
};

2. Performance Metrics
----------------------

Core Web Vitals:
// –ò–∑–º–µ—Ä–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–Ω–æ—Å—Ç
const measurePerformance = () => {
  if (typeof window !== 'undefined' && 'performance' in window) {
    const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;
    
    console.log('Page Load Time:', navigation.loadEventEnd - navigation.loadEventStart);
    console.log('DOM Content Loaded:', navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart);
  }
};

üîÑ STATE MANAGEMENT
===================

1. React Context API
--------------------

Global State:
// contexts/AuthContext.tsx
const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  
  const login = (userData: User) => {
    setUser(userData);
  };
  
  const logout = () => {
    setUser(null);
    // –ò–∑—á–∏—Å—Ç–∏ cookie
    document.cookie = 'auth_token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
  };
  
  const refreshUser = async () => {
    try {
      const response = await fetch('/api/auth/me');
      if (response.ok) {
        const userData = await response.json();
        setUser(userData);
      }
    } catch (error) {
      console.error('Failed to refresh user:', error);
    }
  };
  
  return (
    <AuthContext.Provider value={{ user, loading, login, logout, refreshUser }}>
      {children}
    </AuthContext.Provider>
  );
}

2. Local State Management
-------------------------

Component State:
// –•—É–∫ –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –∫–æ—à–Ω–∏—Ü–∞—Ç–∞
const useCart = () => {
  const [cartItems, setCartItems] = useState<CartItem[]>([]);
  const [loading, setLoading] = useState(false);
  
  const addToCart = async (product: Product, quantity: number = 1) => {
    setLoading(true);
    try {
      const response = await fetch('/api/cart', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ productId: product.id, quantity })
      });
      
      if (response.ok) {
        await fetchCartItems(); // –û–±–Ω–æ–≤–∏ –∫–æ—à–Ω–∏—Ü–∞—Ç–∞
      }
    } catch (error) {
      console.error('Failed to add to cart:', error);
    } finally {
      setLoading(false);
    }
  };
  
  return { cartItems, loading, addToCart };
};

üåê –ò–ù–¢–ï–†–ù–ê–¶–ò–û–ù–ê–õ–ò–ó–ê–¶–ò–Ø
=====================

1. –ë—ä–ª–≥–∞—Ä—Å–∫–∏ –ï–∑–∏–∫
-----------------

–¢–µ–∫—Å—Ç–æ–≤–µ –≤ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∏:
// app/page.tsx
const heroText = {
  title: "–ù–ê–ú–ï–†–ï–¢–ï –ü–ï–†–§–ï–ö–¢–ù–ò–¢–ï –ê–ö–°–ï–°–û–ê–†–ò –ó–ê –í–ê–®–ï–¢–û –£–°–¢–†–û–ô–°–¢–í–û",
  subtitle: "–û—Ç–∫—Ä–∏–π—Ç–µ –Ω–∞–π-–¥–æ–±—Ä–∏—Ç–µ –∫–∞–ª—ä—Ñ–∏, —Å–ª—É—à–∞–ª–∫–∏ –∏ –∞–∫—Å–µ—Å–æ–∞—Ä–∏ –∑–∞ –≤–∞—à–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω",
  cta: "–ü–∞–∑–∞—Ä—É–≤–∞–π —Å–µ–≥–∞",
  learnMore: "–ù–∞—É—á–∏ –ø–æ–≤–µ—á–µ"
};

// components/Header.tsx
const navigation = [
  { name: "–ù–∞—á–∞–ª–æ", href: "/" },
  { name: "–ú–∞–≥–∞–∑–∏–Ω", href: "/shop" },
  { name: "–ó–∞ –Ω–∞—Å", href: "/about" },
  { name: "–ö–æ–Ω—Ç–∞–∫—Ç–∏", href: "/contact" }
];

2. –§–æ—Ä–º–∞—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –î–∞—Ç–∏ –∏ –¶–µ–Ω–∏
-----------------------------

–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è:
// –§–æ—Ä–º–∞—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Ü–µ–Ω–∏
const formatPrice = (price: number) => {
  return new Intl.NumberFormat('bg-BG', {
    style: 'currency',
    currency: 'BGN'
  }).format(price);
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –¥–∞—Ç–∏
const formatDate = (date: Date) => {
  return new Intl.DateTimeFormat('bg-BG', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  }).format(date);
};

üìã –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï
=============

üéØ –ö–ª—é—á–æ–≤–∏ –ü–æ—Å—Ç–∏–∂–µ–Ω–∏—è:

1. –ú–æ–¥–µ—Ä–Ω–∞ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ - Next.js 14 —Å App Router
2. –ü—ä–ª–Ω–∞ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç - –û—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ –ø–æ—Ä—ä—á–∫–∞
3. –ü—Ä–æ—Ñ–µ—Å–∏–æ–Ω–∞–ª–µ–Ω –î–∏–∑–∞–π–Ω - –¢—ä–º–µ–Ω —Ç–µ–º–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–∏
4. –ú–æ–±–∏–ª–Ω–∞ –ê–¥–∞–ø—Ç–∞—Ü–∏—è - Responsive design
5. –°–∏–≥—É—Ä–Ω–æ—Å—Ç - JWT –∞–≤—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
6. –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è - Docker ready
7. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–µ–Ω –ü–∞–Ω–µ–ª - –ü—ä–ª–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
8. –ë—ä–ª–≥–∞—Ä—Å–∫–∏ –ï–∑–∏–∫ - –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è

üöÄ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ–Ω –°—Ç–µ–∫:

- Frontend: Next.js, React, TypeScript, Tailwind CSS, GSAP
- Backend: Next.js API Routes, Prisma ORM
- Database: SQLite (development), PostgreSQL (production ready)
- Authentication: JWT, bcryptjs
- Deployment: Docker, Docker Compose
- Development: Hot reload, TypeScript, ESLint

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:

- 36 –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ 6 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
- –ü—ä–ª–Ω–∞ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ —Ç—ä—Ä–≥–æ–≤–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç
- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–µ–Ω –ø–∞–Ω–µ–ª —Å 5 —Å–µ–∫—Ü–∏–∏
- –ú–æ–±–∏–ª–Ω–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏—è –∑–∞ –≤—Å–∏—á–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
- Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è –∑–∞ –ª–µ—Å–µ–Ω –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç

–¢–æ–∑–∏ –ø—Ä–æ–µ–∫—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–∞ –º–æ–¥–µ—Ä–Ω–∏ —É–µ–± —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –µ –≥–æ—Ç–æ–≤ –∑–∞ production –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ! üéâ

==========================================
–ö–†–ê–ô –ù–ê –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø–¢–ê
==========================================
